name: Python Build, Test & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout du code
        uses: actions/checkout@v4

      - name: 🏗️ Création du dossier build
        run: mkdir -p build

      - name: 📂 Copier les fichiers Python dans build/
        run: |
          cp hashgestion.py build/
          cp aesgestion.py build/
          cp rsagestion.py build/
          echo "✅ Fichiers copiés dans build/"

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_artifacts
          path: build/
          retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Télécharger les artefacts du build
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts
          path: build/

      - name: 🧠 Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 🧪 Lister les fichiers à tester
        run: ls -la build/

      - name: 🧩 Vérifier la présence des fichiers
        run: |
          set -e
          test -f build/hashgestion.py || (echo "❌ hashgestion.py manquant" && exit 1)
          test -f build/aesgestion.py || (echo "❌ aesgestion.py manquant" && exit 1)
          test -f build/rsagestion.py || (echo "❌ rsagestion.py manquant" && exit 1)
          echo "✅ Tous les fichiers nécessaires sont présents"

      - name: 🐍 Vérification syntaxique avec py_compile
        run: |
          for file in build/*.py; do
            echo "Vérification syntaxique de $file"
            python -m py_compile "$file" || (echo "❌ Erreur dans $file" && exit 1)
          done
          echo "✅ Aucun problème de syntaxe trouvé"

      # (Optionnel) Si tu veux des tests unitaires :
      # Crée un fichier test_hashgestion.py, etc. et décommente ci-dessous :
      # - name: 🔍 Exécution des tests unitaires
      #   run: |
      #     pip install pytest
      #     pytest --maxfail=1 --disable-warnings -q

      - name: 📦 Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts
          path: build/
          retention-days: 7

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Télécharger les artefacts testés
        uses: actions/download-artifact@v4
        with:
          name: test_artifacts
          path: build/

      - name: 🗂️ Créer le dossier deploy
        run: mkdir -p deploy

      - name: 🚀 Copier les fichiers Python dans deploy/
        run: |
          cp build/*.py deploy/
          echo "✅ Fichiers copiés dans deploy/"

      - name: 📦 Upload deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy_artifacts
          path: deploy/
          retention-days: 14

      # (Optionnel) Étape de déploiement réel :
      # - name: 🚀 Déploiement sur serveur distant
      #   run: |
      #     echo "Déploiement en cours..."
      #     scp -r deploy/* user@serveur:/var/www/app
      #     echo "✅ Déploiement terminé !"
